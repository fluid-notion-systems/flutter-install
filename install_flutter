#!/usr/bin/env bash

# Flutter Android Development Installation Script for Ubuntu 25.04
# Usage: ./install_flutter.sh
# Set ANDROID_FLUTTER_HOME environment variable to specify base directory, defaults to $HOME/android-flutter
# Set FLUTTER_VERSION environment variable to specify Flutter version, defaults to 3.24.3

set -e  # Exit on any error

# Check for bash version 4+ (required for associative arrays in common.sh)
if [[ ${BASH_VERSION%%.*} -lt 4 ]]; then
    echo "Error: Bash 4.0 or higher is required" >&2
    echo "Current version: $BASH_VERSION" >&2
    echo "Please install modern bash: sudo apt install bash" >&2
    echo "Then restart your terminal and try again" >&2
    exit 1
fi

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source common functions
if [[ -f "$SCRIPT_DIR/common" ]]; then
    source "$SCRIPT_DIR/common"
else
    echo "Error: common not found in $SCRIPT_DIR"
    exit 1
fi

# Check if running as root
check_not_root

# Configuration
if [[ -n "$FLUTTER_VERSION" ]]; then
    log_info "Using specified Flutter version: $FLUTTER_VERSION"
else
    FLUTTER_VERSION="$DEFAULT_FLUTTER_VERSION"
    log_info "Using default Flutter version: $FLUTTER_VERSION"
fi
FLUTTER_URL=$(get_flutter_url "$FLUTTER_VERSION")
CMDLINE_TOOLS_URL=$(get_cmdline_tools_url)

# Check and set base directory
if [[ -n "$ANDROID_FLUTTER_HOME" ]]; then
    log_info "Using existing ANDROID_FLUTTER_HOME: $ANDROID_FLUTTER_HOME"
else
    ANDROID_FLUTTER_HOME="$(pwd)"
    log_info "ANDROID_FLUTTER_HOME not set, using current directory: $ANDROID_FLUTTER_HOME"
fi

# Set Android SDK and Flutter directories based on ANDROID_FLUTTER_HOME
ANDROID_HOME="$ANDROID_FLUTTER_HOME/android"
FLUTTER_HOME="$ANDROID_FLUTTER_HOME/flutter"

log_info "Starting Flutter Android development environment installation..."



# Update system packages
log_info "Updating system packages..."
sudo apt update && sudo apt upgrade -y
log_success "System packages updated"

# Install prerequisites
log_info "Installing prerequisites..."
sudo apt install -y curl git unzip xz-utils zip libglu1-mesa wget openjdk-17-jdk
log_success "Prerequisites installed"

# Set JAVA_HOME
JAVA_HOME_PATH=$(get_java_home_path)
if [[ -d "$JAVA_HOME_PATH" ]]; then
    add_env_var "JAVA_HOME" "$JAVA_HOME_PATH"
    export JAVA_HOME="$JAVA_HOME_PATH"
    log_success "JAVA_HOME set to $JAVA_HOME_PATH"
else
    log_error "Java installation directory not found at $JAVA_HOME_PATH"
    exit 1
fi

# Create development directory structure
log_info "Creating Android Flutter development directory structure..."
ensure_directory "$ANDROID_FLUTTER_HOME"
ensure_directory "$ANDROID_HOME"
ensure_directory "$ANDROID_FLUTTER_HOME/download"
ensure_directory "$(dirname "$FLUTTER_HOME")"
cd "$ANDROID_FLUTTER_HOME/download"

# Download Flutter if not already present
if [[ -d "$FLUTTER_HOME" ]]; then
    log_warning "Flutter directory already exists at $FLUTTER_HOME"
    if confirm "Do you want to remove it and reinstall?"; then
        rm -rf "$FLUTTER_HOME"
        log_info "Removed existing Flutter installation"
    else
        log_info "Keeping existing Flutter installation"
    fi
fi

if [[ ! -d "$FLUTTER_HOME" ]]; then
    FLUTTER_ARCHIVE="flutter_linux_${FLUTTER_VERSION}-stable.tar.xz"
    download_file "$FLUTTER_URL" "$FLUTTER_ARCHIVE" "Flutter SDK v$FLUTTER_VERSION"

    log_info "Extracting Flutter SDK..."
    tar xf "$FLUTTER_ARCHIVE"
    mv flutter "$FLUTTER_HOME"
    log_success "Flutter SDK extracted and moved to $FLUTTER_HOME (archive kept for future use)"
fi

# Add Flutter to PATH
add_to_path "$FLUTTER_HOME/bin"
export PATH="$PATH:$FLUTTER_HOME/bin"

# Create Android SDK directory
log_info "Setting up Android SDK at $ANDROID_HOME..."
ensure_directory "$ANDROID_HOME"

# Download Android Command Line Tools if not present
if [[ ! -d "$ANDROID_HOME/cmdline-tools/latest" ]]; then
    cd "$ANDROID_FLUTTER_HOME/download"
    CMDLINE_TOOLS_ARCHIVE="commandlinetools.zip"
    download_file "$CMDLINE_TOOLS_URL" "$CMDLINE_TOOLS_ARCHIVE" "Android Command Line Tools"

    log_info "Extracting Android Command Line Tools..."
    unzip -q "$CMDLINE_TOOLS_ARCHIVE"
    ensure_directory "$ANDROID_HOME/cmdline-tools/latest"
    mv cmdline-tools/* "$ANDROID_HOME/cmdline-tools/latest/" 2>/dev/null || true
    # Clean up any leftover directories
    rm -rf cmdline-tools
    log_success "Android Command Line Tools installed (archive kept for future use)"
else
    log_info "Android Command Line Tools already present"
fi

# Set Android environment variables
add_env_var "ANDROID_HOME" "$ANDROID_HOME"
add_to_path "$ANDROID_HOME/cmdline-tools/latest/bin"
add_to_path "$ANDROID_HOME/platform-tools"

# Export for current session
export ANDROID_HOME="$ANDROID_HOME"
export PATH="$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools"

# Install Android SDK components
log_info "Installing Android SDK components..."
yes | sdkmanager --licenses >/dev/null 2>&1 || true
sdkmanager $(get_android_sdk_components)
log_success "Android SDK components installed"

# Install additional tools for device debugging
log_info "Setting up Android device debugging..."
sudo apt install -y libimobiledevice-utils usbmuxd libimobiledevice6 libplist3

# Add user to plugdev group
if ! groups | grep -q plugdev; then
    sudo usermod -aG plugdev "$USER"
    log_success "Added user to plugdev group"
else
    log_info "User already in plugdev group"
fi

# Create udev rules for Android devices
UDEV_RULES="/etc/udev/rules.d/51-android.rules"
if [[ ! -f "$UDEV_RULES" ]]; then
    log_info "Creating udev rules for Android devices..."
    sudo tee "$UDEV_RULES" > /dev/null <<EOF
# Android device udev rules
SUBSYSTEM=="usb", ATTR{idVendor}=="0502", MODE="0666", OWNER="$USER"
SUBSYSTEM=="usb", ATTR{idVendor}=="0b05", MODE="0666", OWNER="$USER"
SUBSYSTEM=="usb", ATTR{idVendor}=="413c", MODE="0666", OWNER="$USER"
SUBSYSTEM=="usb", ATTR{idVendor}=="0489", MODE="0666", OWNER="$USER"
SUBSYSTEM=="usb", ATTR{idVendor}=="18d1", MODE="0666", OWNER="$USER"
SUBSYSTEM=="usb", ATTR{idVendor}=="04e8", MODE="0666", OWNER="$USER"
SUBSYSTEM=="usb", ATTR{idVendor}=="2717", MODE="0666", OWNER="$USER"
SUBSYSTEM=="usb", ATTR{idVendor}=="2a47", MODE="0666", OWNER="$USER"
EOF

    sudo udevadm control --reload-rules
    sudo udevadm trigger
    log_success "Android device udev rules created"
else
    log_info "Android device udev rules already exist"
fi

# Source the shell config to make sure environment variables are available
source_shell_config

log_success "Installation completed!"

# Run flutter doctor
run_flutter_doctor

echo
print_summary "$ANDROID_FLUTTER_HOME" "$FLUTTER_HOME" "$ANDROID_HOME" "$JAVA_HOME"

log_info "Next steps:"
echo "  1. Restart your terminal or run: source $(get_shell_config)"
echo "  2. Run: flutter doctor"
echo "  3. Create your first app: flutter create my_app"
echo "  4. For Android emulator support, run:"
echo "     sdkmanager \"emulator\" \"system-images;android-${ANDROID_API_LEVEL};google_apis;x86_64\""
echo
log_warning "Note: You may need to log out and log back in for group membership changes to take effect."
