#!/bin/bash

# Flutter Android Development Installation Script for Ubuntu 25.04
# Usage: ./install_flutter.sh
# Set ANDROID_FLUTTER_HOME environment variable to specify base directory, defaults to $HOME/android-flutter
# Set FLUTTER_VERSION environment variable to specify Flutter version, defaults to 3.24.3

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   log_error "This script should not be run as root for security reasons."
   exit 1
fi

# Configuration
if [[ -n "$FLUTTER_VERSION" ]]; then
    log_info "Using specified Flutter version: $FLUTTER_VERSION"
else
    FLUTTER_VERSION="3.24.3"
    log_info "Using default Flutter version: $FLUTTER_VERSION"
fi
FLUTTER_URL="https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_${FLUTTER_VERSION}-stable.tar.xz"
CMDLINE_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip"

# Check and set base directory
if [[ -n "$ANDROID_FLUTTER_HOME" ]]; then
    log_info "Using existing ANDROID_FLUTTER_HOME: $ANDROID_FLUTTER_HOME"
else
    ANDROID_FLUTTER_HOME="$(pwd)"
    log_info "ANDROID_FLUTTER_HOME not set, using current directory: $ANDROID_FLUTTER_HOME"
fi

# Set Android SDK and Flutter directories based on ANDROID_FLUTTER_HOME
ANDROID_HOME="$ANDROID_FLUTTER_HOME/android"
FLUTTER_HOME="$ANDROID_FLUTTER_HOME/flutter"

log_info "Starting Flutter Android development environment installation..."

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to add to PATH if not already present
add_to_path() {
    local new_path="$1"
    local shell_rc="$HOME/.bashrc"

    if ! grep -q "$new_path" "$shell_rc" 2>/dev/null; then
        echo "export PATH=\"\$PATH:$new_path\"" >> "$shell_rc"
        log_success "Added $new_path to PATH in $shell_rc"
    else
        log_info "$new_path already in PATH"
    fi
}

# Function to add environment variable
add_env_var() {
    local var_name="$1"
    local var_value="$2"
    local shell_rc="$HOME/.bashrc"

    if ! grep -q "export $var_name=" "$shell_rc" 2>/dev/null; then
        echo "export $var_name=\"$var_value\"" >> "$shell_rc"
        log_success "Added $var_name environment variable"
    else
        log_info "$var_name environment variable already exists"
    fi
}

# Update system packages
log_info "Updating system packages..."
sudo apt update && sudo apt upgrade -y
log_success "System packages updated"

# Install prerequisites
log_info "Installing prerequisites..."
sudo apt install -y curl git unzip xz-utils zip libglu1-mesa wget openjdk-17-jdk
log_success "Prerequisites installed"

# Set JAVA_HOME
JAVA_HOME_PATH="/usr/lib/jvm/java-17-openjdk-amd64"
if [[ -d "$JAVA_HOME_PATH" ]]; then
    add_env_var "JAVA_HOME" "$JAVA_HOME_PATH"
    export JAVA_HOME="$JAVA_HOME_PATH"
    log_success "JAVA_HOME set to $JAVA_HOME_PATH"
else
    log_error "Java installation directory not found at $JAVA_HOME_PATH"
    exit 1
fi

# Create development directory structure
log_info "Creating Android Flutter development directory structure..."
mkdir -p "$ANDROID_FLUTTER_HOME"
mkdir -p "$ANDROID_HOME"
mkdir -p "$ANDROID_FLUTTER_HOME/download"
mkdir -p "$(dirname "$FLUTTER_HOME")"
cd "$ANDROID_FLUTTER_HOME/download"

# Download Flutter if not already present
if [[ -d "$FLUTTER_HOME" ]]; then
    log_warning "Flutter directory already exists at $FLUTTER_HOME"
    read -p "Do you want to remove it and reinstall? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf "$FLUTTER_HOME"
        log_info "Removed existing Flutter installation"
    else
        log_info "Keeping existing Flutter installation"
    fi
fi

if [[ ! -d "$FLUTTER_HOME" ]]; then
    FLUTTER_ARCHIVE="flutter_linux_${FLUTTER_VERSION}-stable.tar.xz"

    if [[ -f "$FLUTTER_ARCHIVE" ]]; then
        log_info "Flutter archive already exists, verifying..."
    else
        log_info "Downloading Flutter SDK v$FLUTTER_VERSION..."
    fi

    wget -c -O "$FLUTTER_ARCHIVE" "$FLUTTER_URL"

    log_info "Extracting Flutter SDK..."
    tar xf "$FLUTTER_ARCHIVE"
    mv flutter "$FLUTTER_HOME"
    log_success "Flutter SDK extracted and moved to $FLUTTER_HOME (archive kept for future use)"
fi

# Add Flutter to PATH
add_to_path "$FLUTTER_HOME/bin"
export PATH="$PATH:$FLUTTER_HOME/bin"

# Create Android SDK directory
log_info "Setting up Android SDK at $ANDROID_HOME..."
mkdir -p "$ANDROID_HOME"

# Download Android Command Line Tools if not present
if [[ ! -d "$ANDROID_HOME/cmdline-tools/latest" ]]; then
    cd "$ANDROID_FLUTTER_HOME/download"
    CMDLINE_TOOLS_ARCHIVE="commandlinetools.zip"

    if [[ -f "$CMDLINE_TOOLS_ARCHIVE" ]]; then
        log_info "Android Command Line Tools archive already exists, verifying..."
    else
        log_info "Downloading Android Command Line Tools..."
    fi

    wget -c -O "$CMDLINE_TOOLS_ARCHIVE" "$CMDLINE_TOOLS_URL"

    log_info "Extracting Android Command Line Tools..."
    unzip -q "$CMDLINE_TOOLS_ARCHIVE"
    mkdir -p "$ANDROID_HOME/cmdline-tools/latest"
    mv cmdline-tools/* "$ANDROID_HOME/cmdline-tools/latest/" 2>/dev/null || true
    # Clean up any leftover directories
    rm -rf cmdline-tools
    log_success "Android Command Line Tools installed (archive kept for future use)"
else
    log_info "Android Command Line Tools already present"
fi

# Set Android environment variables
add_env_var "ANDROID_HOME" "$ANDROID_HOME"
add_to_path "$ANDROID_HOME/cmdline-tools/latest/bin"
add_to_path "$ANDROID_HOME/platform-tools"

# Export for current session
export ANDROID_HOME="$ANDROID_HOME"
export PATH="$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools"

# Install Android SDK components
log_info "Installing Android SDK components..."
yes | sdkmanager --licenses >/dev/null 2>&1 || true
sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"
log_success "Android SDK components installed"

# Install additional tools for device debugging
log_info "Setting up Android device debugging..."
sudo apt install -y libimobiledevice-utils usbmuxd libimobiledevice6 libplist3

# Add user to plugdev group
if ! groups | grep -q plugdev; then
    sudo usermod -aG plugdev "$USER"
    log_success "Added user to plugdev group"
else
    log_info "User already in plugdev group"
fi

# Create udev rules for Android devices
UDEV_RULES="/etc/udev/rules.d/51-android.rules"
if [[ ! -f "$UDEV_RULES" ]]; then
    log_info "Creating udev rules for Android devices..."
    sudo tee "$UDEV_RULES" > /dev/null <<EOF
# Android device udev rules
SUBSYSTEM=="usb", ATTR{idVendor}=="0502", MODE="0666", OWNER="$USER"
SUBSYSTEM=="usb", ATTR{idVendor}=="0b05", MODE="0666", OWNER="$USER"
SUBSYSTEM=="usb", ATTR{idVendor}=="413c", MODE="0666", OWNER="$USER"
SUBSYSTEM=="usb", ATTR{idVendor}=="0489", MODE="0666", OWNER="$USER"
SUBSYSTEM=="usb", ATTR{idVendor}=="18d1", MODE="0666", OWNER="$USER"
SUBSYSTEM=="usb", ATTR{idVendor}=="04e8", MODE="0666", OWNER="$USER"
SUBSYSTEM=="usb", ATTR{idVendor}=="2717", MODE="0666", OWNER="$USER"
SUBSYSTEM=="usb", ATTR{idVendor}=="2a47", MODE="0666", OWNER="$USER"
EOF

    sudo udevadm control --reload-rules
    sudo udevadm trigger
    log_success "Android device udev rules created"
else
    log_info "Android device udev rules already exist"
fi

# Source the bashrc to make sure environment variables are available
source "$HOME/.bashrc" 2>/dev/null || true

log_success "Installation completed!"

echo
log_info "Running Flutter doctor to verify installation..."
echo

# Run flutter doctor
if command_exists flutter; then
    flutter doctor
else
    log_warning "Flutter command not found in current session. Please run:"
    echo "  source ~/.bashrc"
    echo "  flutter doctor"
fi

echo
log_info "Installation Summary:"
echo "  Base Directory: $ANDROID_FLUTTER_HOME"
echo "  Flutter SDK: $FLUTTER_HOME"
echo "  Android SDK: $ANDROID_HOME"
echo "  Java: $JAVA_HOME"
echo
log_info "Next steps:"
echo "  1. Restart your terminal or run: source ~/.bashrc"
echo "  2. Run: flutter doctor"
echo "  3. Create your first app: flutter create my_app"
echo "  4. For Android emulator support, run:"
echo "     sdkmanager \"emulator\" \"system-images;android-34;google_apis;x86_64\""
echo
log_warning "Note: You may need to log out and log back in for group membership changes to take effect."
