#!/usr/bin/env bash

# Flutter Android & iOS Development Installation Script for macOS
# Usage: ./install_flutter_mac [OPTIONS]
#
# Options:
#   --simulator    Install iOS Simulator and related development tools
#   --cocoapods    Install CocoaPods for iOS dependency management
#   --xcodes       Install Xcode using xcodes tool (bypasses App Store)
#   --help, -h     Show this help message
#
# Environment Variables:
#   ANDROID_FLUTTER_HOME  Base directory for installation (default: current directory)
#   FLUTTER_VERSION       Flutter version to install (default: from VERSIONS file)
#
# Examples:
#   ./install_flutter_mac                    # Basic Flutter + Android setup
#   ./install_flutter_mac --simulator        # Include iOS Simulator setup
#   ./install_flutter_mac --cocoapods        # Include CocoaPods installation
#   ./install_flutter_mac --xcodes           # Install Xcode via xcodes tool
#   FLUTTER_VERSION=3.19.6 ./install_flutter_mac --simulator --cocoapods --xcodes

set -e  # Exit on any error

# Check for bash version 4+ (required for associative arrays in common.sh)
if [[ ${BASH_VERSION%%.*} -lt 4 ]]; then
    echo "Error: Bash 4.0 or higher is required" >&2
    echo "Current version: $BASH_VERSION" >&2
    echo "Please run: ./setup_homebrew to install modern bash" >&2
    echo "Then restart your terminal and try again" >&2
    exit 1
fi

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source common functions
if [[ -f "$SCRIPT_DIR/common.sh" ]]; then
    source "$SCRIPT_DIR/common.sh"
else
    echo "Error: common.sh not found in $SCRIPT_DIR"
    exit 1
fi

# Array to collect manual actions
declare -a MANUAL_ACTIONS

# Function to show help
show_help() {
    echo "Flutter Android & iOS Development Installation Script for macOS"
    echo
    echo "Usage: $0 [OPTIONS]"
    echo
    echo "Options:"
    echo "  --simulator    Install iOS Simulator and related development tools"
    echo "  --cocoapods    Install CocoaPods for iOS dependency management"
    echo "  --xcodes       Install Xcode using xcodes tool (bypasses App Store)"
    echo "  --help, -h     Show this help message"
    echo
    echo "Environment Variables:"
    echo "  ANDROID_FLUTTER_HOME  Base directory for installation (default: current directory)"
    echo "  FLUTTER_VERSION       Flutter version to install (default: from VERSIONS file)"
    echo
    echo "Examples:"
    echo "  $0                    # Basic Flutter + Android setup"
    echo "  $0 --simulator        # Include iOS Simulator setup"
    echo "  $0 --cocoapods        # Include CocoaPods installation"
    echo "  $0 --xcodes           # Install Xcode via xcodes tool"
    echo "  FLUTTER_VERSION=3.19.6 $0 --simulator --cocoapods --xcodes"
    echo
    exit 0
}

# Parse command line arguments
INSTALL_SIMULATOR=false
INSTALL_COCOAPODS=false
INSTALL_XCODES=false
for arg in "$@"; do
    case $arg in
        --simulator)
            INSTALL_SIMULATOR=true
            shift
            ;;
        --cocoapods)
            INSTALL_COCOAPODS=true
            shift
            ;;
        --xcodes)
            INSTALL_XCODES=true
            shift
            ;;
        --help|-h)
            show_help
            ;;
        *)
            echo "Unknown argument: $arg" >&2
            echo "Use --help for usage information" >&2
            exit 1
            ;;
    esac
done

# Check if running as root
check_not_root

# Configuration
if [[ -n "$FLUTTER_VERSION" ]]; then
    log_info "Using specified Flutter version: $FLUTTER_VERSION"
else
    FLUTTER_VERSION="$DEFAULT_FLUTTER_VERSION"
    log_info "Using default Flutter version: $FLUTTER_VERSION"
fi

FLUTTER_URL=$(get_flutter_url "$FLUTTER_VERSION")
CMDLINE_TOOLS_URL=$(get_cmdline_tools_url)

# Check and set base directory
if [[ -n "$ANDROID_FLUTTER_HOME" ]]; then
    log_info "Using existing ANDROID_FLUTTER_HOME: $ANDROID_FLUTTER_HOME"
else
    ANDROID_FLUTTER_HOME="$(pwd)"
    log_info "ANDROID_FLUTTER_HOME not set, using current directory: $ANDROID_FLUTTER_HOME"
fi

# Set Android SDK and Flutter directories based on ANDROID_FLUTTER_HOME
ANDROID_HOME="$ANDROID_FLUTTER_HOME/android"
FLUTTER_HOME="$ANDROID_FLUTTER_HOME/flutter"

# Detect Mac architecture
ARCH=$(detect_mac_arch)
log_info "Detected Mac architecture: $ARCH"

print_section "Flutter Android & iOS Development Environment Installation for macOS"

# Install Xcode Command Line Tools
print_section "Installing Xcode Command Line Tools"
if ! xcode-select -p >/dev/null 2>&1; then
    log_step "Installing Xcode Command Line Tools..."
    xcode-select --install
    log_manual "Complete the Xcode Command Line Tools installation when prompted"
    MANUAL_ACTIONS+=("Complete Xcode Command Line Tools installation dialog when it appears")
else
    log_success "Xcode Command Line Tools already installed"
fi

# Check Homebrew is available
print_section "Checking Homebrew"
if ! command_exists brew; then
    log_error "Homebrew not found! Please install Homebrew first:"
    echo "  Run: ./setup_homebrew"
    echo "  Or visit: https://brew.sh"
    exit 1
else
    log_success "Homebrew found"
fi

# Install prerequisites
print_section "Installing Prerequisites"
log_step "Installing development tools..."
brew install curl git unzip wget openjdk@17
log_success "Prerequisites installed"

# Set JAVA_HOME
JAVA_HOME_PATH=$(get_java_home_path)
if [[ -d "$JAVA_HOME_PATH" ]]; then
    add_env_var "JAVA_HOME" "$JAVA_HOME_PATH"
    export JAVA_HOME="$JAVA_HOME_PATH"
    log_success "JAVA_HOME set to $JAVA_HOME_PATH"
else
    log_error "Java installation directory not found at $JAVA_HOME_PATH"
    exit 1
fi

# Create development directory structure
print_section "Setting up Development Directories"
ensure_directory "$ANDROID_FLUTTER_HOME"
ensure_directory "$ANDROID_HOME"
ensure_directory "$ANDROID_FLUTTER_HOME/download"
ensure_directory "$(dirname "$FLUTTER_HOME")"

cd "$ANDROID_FLUTTER_HOME/download"

# Download Flutter if not already present
print_section "Installing Flutter SDK"
if [[ -d "$FLUTTER_HOME" ]]; then
    log_warning "Flutter directory already exists at $FLUTTER_HOME"
    if confirm "Do you want to remove it and reinstall?"; then
        rm -rf "$FLUTTER_HOME"
        log_info "Removed existing Flutter installation"
    else
        log_info "Keeping existing Flutter installation"
    fi
fi

if [[ ! -d "$FLUTTER_HOME" ]]; then
    FLUTTER_ARCHIVE="flutter_macos_${FLUTTER_VERSION}-stable.zip"
    download_file "$FLUTTER_URL" "$FLUTTER_ARCHIVE" "Flutter SDK v$FLUTTER_VERSION"

    log_step "Extracting Flutter SDK..."
    unzip -q "$FLUTTER_ARCHIVE"
    mv flutter "$FLUTTER_HOME"
    log_success "Flutter SDK extracted and moved to $FLUTTER_HOME"
fi

# Add Flutter to PATH
add_to_path "$FLUTTER_HOME/bin"
export PATH="$PATH:$FLUTTER_HOME/bin"

# Set up Android SDK
print_section "Setting up Android SDK"
ensure_directory "$ANDROID_HOME"

# Download Android Command Line Tools if not present
if [[ ! -d "$ANDROID_HOME/cmdline-tools/latest" ]]; then
    cd "$ANDROID_FLUTTER_HOME/download"
    CMDLINE_TOOLS_ARCHIVE="commandlinetools.zip"
    download_file "$CMDLINE_TOOLS_URL" "$CMDLINE_TOOLS_ARCHIVE" "Android Command Line Tools"

    log_step "Extracting Android Command Line Tools..."
    unzip -q "$CMDLINE_TOOLS_ARCHIVE"
    ensure_directory "$ANDROID_HOME/cmdline-tools/latest"
    mv cmdline-tools/* "$ANDROID_HOME/cmdline-tools/latest/" 2>/dev/null || true
    rm -rf cmdline-tools
    log_success "Android Command Line Tools installed"
else
    log_info "Android Command Line Tools already present"
fi

# Set Android environment variables
add_env_var "ANDROID_HOME" "$ANDROID_HOME"
add_to_path "$ANDROID_HOME/cmdline-tools/latest/bin"
add_to_path "$ANDROID_HOME/platform-tools"

# Export for current session
export ANDROID_HOME="$ANDROID_HOME"
export PATH="$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools"

# Install Android SDK components
print_section "Installing Android SDK Components"
log_step "Installing Android SDK components..."
yes | sdkmanager --licenses >/dev/null 2>&1 || true
sdkmanager $(get_android_sdk_components)
log_success "Android SDK components installed"

# Install Xcode if requested
if [[ "$INSTALL_XCODES" == true ]]; then
    print_section "Installing Xcode via xcodes"

    # Check if xcodes is installed
    if ! command_exists xcodes; then
        log_step "Installing xcodes tool..."
        brew install xcodesorg/made/xcodes
        log_success "xcodes installed"
    fi

    # Check if Xcode is already installed
    if [[ -d "/Applications/Xcode.app" ]]; then
        log_info "Xcode already installed, checking version..."
        xcodes installed
    else
        log_step "Installing latest Xcode (this may take a while)..."
        log_info "Note: This requires an Apple ID and may prompt for login"
        if xcodes install --latest; then
            log_success "Xcode installed successfully"
        else
            log_error "Failed to install Xcode via xcodes"
            MANUAL_ACTIONS+=("Install Xcode manually from App Store or developer.apple.com")
        fi
    fi
fi

# Check for Xcode installation
print_section "Checking Xcode Installation"
if [[ -d "/Applications/Xcode.app" ]]; then
    log_success "Xcode is installed"

    # Accept Xcode license and run first launch
    log_step "Accepting Xcode license and running first launch..."
    if sudo xcodebuild -license accept 2>/dev/null && sudo xcodebuild -runFirstLaunch 2>/dev/null; then
        log_success "Xcode license accepted and first launch completed"
    else
        log_warning "Xcode license may not be accepted"
        MANUAL_ACTIONS+=("Open Xcode and accept the license agreement")
    fi

    # Install iOS Simulator if requested
    if [[ "$INSTALL_SIMULATOR" == true ]]; then
        print_section "Setting up iOS Simulator"
        log_step "Checking iOS Simulator installation..."

        # Check if iOS runtime is available
        if xcrun simctl list runtimes | grep -q "iOS"; then
            log_success "iOS Simulator runtime already available"
        else
            log_warning "iOS Simulator runtime not found"
            MANUAL_ACTIONS+=("Open Xcode, go to Settings > Platforms, and install iOS Simulator")
        fi

        # Check for available iOS simulators
        if xcrun simctl list devices | grep -q "iPhone"; then
            log_success "iOS device simulators available"
            log_info "Available iOS simulators:"
            xcrun simctl list devices | grep "iPhone" | head -3
        else
            log_warning "No iOS device simulators found"
            MANUAL_ACTIONS+=("Open Xcode and create iOS simulator devices if needed")
        fi

        # Install additional simulator tools
        log_step "Installing iOS development tools..."
        if command_exists ios-deploy; then
            log_success "ios-deploy already installed"
        else
            log_step "Installing ios-deploy for device deployment..."
            brew install ios-deploy
            log_success "ios-deploy installed"
        fi
    fi
else
    log_warning "Xcode is not installed"
    if [[ "$INSTALL_XCODES" != true ]]; then
        if [[ "$INSTALL_SIMULATOR" == true ]]; then
            MANUAL_ACTIONS+=("Install Xcode from App Store or run with --xcodes flag (required for iOS Simulator)")
        else
            MANUAL_ACTIONS+=("Install Xcode from App Store or run with --xcodes flag (required for iOS development)")
        fi
    fi
fi

# Install CocoaPods for iOS dependencies (if requested)
if [[ "$INSTALL_COCOAPODS" == true ]]; then
    print_section "Installing CocoaPods"
    if ! command_exists pod; then
        log_step "Installing CocoaPods..."
        sudo gem install cocoapods
        log_success "CocoaPods installed"
    else
        log_success "CocoaPods already installed"
    fi
fi

# Source shell configuration
source_shell_config

print_section "Installation Complete!"

# Print summary
print_summary "$ANDROID_FLUTTER_HOME" "$FLUTTER_HOME" "$ANDROID_HOME" "$JAVA_HOME"

# Run flutter doctor
run_flutter_doctor

# Print next steps
print_section "Next Steps"
log_info "Recommended next steps:"
echo "  1. Restart your terminal or run: source $(get_shell_config)"
echo "  2. Run: flutter doctor"
echo "  3. Create your first app: flutter create my_app"
echo "  4. For Android emulator support, run:"
echo "     sdkmanager \"emulator\" \"system-images;android-${ANDROID_API_LEVEL};google_apis;x86_64\""
if [[ "$INSTALL_SIMULATOR" == true ]]; then
    echo "  5. Test iOS Simulator: open -a Simulator"
    echo "  6. For iOS development, ensure you have an Apple Developer account"
else
    echo "  5. For iOS development, ensure you have an Apple Developer account"
    echo "  6. Re-run with --simulator flag to set up iOS Simulator"
fi

if [[ "$INSTALL_COCOAPODS" != true ]]; then
    echo "  7. Re-run with --cocoapods flag to install CocoaPods for iOS dependencies"
fi

if [[ "$INSTALL_XCODES" != true && ! -d "/Applications/Xcode.app" ]]; then
    echo "  8. Re-run with --xcodes flag to install Xcode automatically"
fi

# Additional iOS-specific recommendations
echo
log_info "iOS Development Notes:"
echo "  • iOS development requires a Mac with Xcode"
echo "  • You'll need an Apple Developer account for device testing"
echo "  • Simulator testing is free but device deployment requires paid account"
if [[ "$INSTALL_COCOAPODS" == true ]]; then
    echo "  • CocoaPods installed for iOS dependency management"
else
    echo "  • CocoaPods can be installed later with --cocoapods flag"
fi

# Print manual actions if any
print_manual_actions "${MANUAL_ACTIONS[@]}"

log_success "macOS Flutter development environment setup completed!"
